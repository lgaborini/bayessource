// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

// logSumExp_arma
double logSumExp_arma(const arma::vec& v);
RcppExport SEXP bayessource_logSumExp_arma(SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type v(vSEXP);
    rcpp_result_gen = Rcpp::wrap(logSumExp_arma(v));
    return rcpp_result_gen;
END_RCPP
}
// logSumExpMean_arma
double logSumExpMean_arma(const arma::vec& v);
RcppExport SEXP bayessource_logSumExpMean_arma(SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type v(vSEXP);
    rcpp_result_gen = Rcpp::wrap(logSumExpMean_arma(v));
    return rcpp_result_gen;
END_RCPP
}
// logCumsumExp_arma
arma::vec logCumsumExp_arma(const arma::vec& v);
RcppExport SEXP bayessource_logCumsumExp_arma(SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type v(vSEXP);
    rcpp_result_gen = Rcpp::wrap(logCumsumExp_arma(v));
    return rcpp_result_gen;
END_RCPP
}
// logCumsumExpmean_arma
arma::vec logCumsumExpmean_arma(const arma::vec& v);
RcppExport SEXP bayessource_logCumsumExpmean_arma(SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type v(vSEXP);
    rcpp_result_gen = Rcpp::wrap(logCumsumExpmean_arma(v));
    return rcpp_result_gen;
END_RCPP
}
// inv_triangular
arma::mat inv_triangular(const arma::mat& U);
RcppExport SEXP bayessource_inv_triangular(SEXP USEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type U(USEXP);
    rcpp_result_gen = Rcpp::wrap(inv_triangular(U));
    return rcpp_result_gen;
END_RCPP
}
// chol2inv
arma::mat chol2inv(const arma::mat& U_chol);
RcppExport SEXP bayessource_chol2inv(SEXP U_cholSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type U_chol(U_cholSEXP);
    rcpp_result_gen = Rcpp::wrap(chol2inv(U_chol));
    return rcpp_result_gen;
END_RCPP
}
// inv_Cholesky_from_Cholesky
arma::mat inv_Cholesky_from_Cholesky(const arma::mat& U);
RcppExport SEXP bayessource_inv_Cholesky_from_Cholesky(SEXP USEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type U(USEXP);
    rcpp_result_gen = Rcpp::wrap(inv_Cholesky_from_Cholesky(U));
    return rcpp_result_gen;
END_RCPP
}
// ldet_from_Cholesky
double ldet_from_Cholesky(const arma::mat& T_chol);
RcppExport SEXP bayessource_ldet_from_Cholesky(SEXP T_cholSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type T_chol(T_cholSEXP);
    rcpp_result_gen = Rcpp::wrap(ldet_from_Cholesky(T_chol));
    return rcpp_result_gen;
END_RCPP
}
// rmvnorm_arma
arma::mat rmvnorm_arma(const unsigned int n, const arma::colvec& mu, const arma::mat& Cov, const bool is_chol);
RcppExport SEXP bayessource_rmvnorm_arma(SEXP nSEXP, SEXP muSEXP, SEXP CovSEXP, SEXP is_cholSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const unsigned int >::type n(nSEXP);
    Rcpp::traits::input_parameter< const arma::colvec& >::type mu(muSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Cov(CovSEXP);
    Rcpp::traits::input_parameter< const bool >::type is_chol(is_cholSEXP);
    rcpp_result_gen = Rcpp::wrap(rmvnorm_arma(n, mu, Cov, is_chol));
    return rcpp_result_gen;
END_RCPP
}
// dmvnorm_arma
arma::vec dmvnorm_arma(const arma::mat& x, const arma::rowvec& mean, const arma::mat& Cov, const bool logd, const bool is_chol);
RcppExport SEXP bayessource_dmvnorm_arma(SEXP xSEXP, SEXP meanSEXP, SEXP CovSEXP, SEXP logdSEXP, SEXP is_cholSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const arma::rowvec& >::type mean(meanSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Cov(CovSEXP);
    Rcpp::traits::input_parameter< const bool >::type logd(logdSEXP);
    Rcpp::traits::input_parameter< const bool >::type is_chol(is_cholSEXP);
    rcpp_result_gen = Rcpp::wrap(dmvnorm_arma(x, mean, Cov, logd, is_chol));
    return rcpp_result_gen;
END_RCPP
}
// rwish_arma
arma::mat rwish_arma(const double v, const arma::mat& S, const bool is_chol, const bool return_chol);
RcppExport SEXP bayessource_rwish_arma(SEXP vSEXP, SEXP SSEXP, SEXP is_cholSEXP, SEXP return_cholSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const double >::type v(vSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type S(SSEXP);
    Rcpp::traits::input_parameter< const bool >::type is_chol(is_cholSEXP);
    Rcpp::traits::input_parameter< const bool >::type return_chol(return_cholSEXP);
    rcpp_result_gen = Rcpp::wrap(rwish_arma(v, S, is_chol, return_chol));
    return rcpp_result_gen;
END_RCPP
}
// diwishart_inverse_arma
double diwishart_inverse_arma(const arma::mat& X_inv, const double& df, const arma::mat& Sigma, const bool logd, const bool is_chol);
RcppExport SEXP bayessource_diwishart_inverse_arma(SEXP X_invSEXP, SEXP dfSEXP, SEXP SigmaSEXP, SEXP logdSEXP, SEXP is_cholSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type X_inv(X_invSEXP);
    Rcpp::traits::input_parameter< const double& >::type df(dfSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Sigma(SigmaSEXP);
    Rcpp::traits::input_parameter< const bool >::type logd(logdSEXP);
    Rcpp::traits::input_parameter< const bool >::type is_chol(is_cholSEXP);
    rcpp_result_gen = Rcpp::wrap(diwishart_inverse_arma(X_inv, df, Sigma, logd, is_chol));
    return rcpp_result_gen;
END_RCPP
}
// samesource_C
Rcpp::List samesource_C(const arma::mat& dati, const unsigned int n_iter, const arma::mat& B_inv, const arma::mat& W_inv, const arma::mat& U, const double nw, const arma::vec& mu, const unsigned int burn_in, const bool chain_output, const bool verbose);
RcppExport SEXP bayessource_samesource_C(SEXP datiSEXP, SEXP n_iterSEXP, SEXP B_invSEXP, SEXP W_invSEXP, SEXP USEXP, SEXP nwSEXP, SEXP muSEXP, SEXP burn_inSEXP, SEXP chain_outputSEXP, SEXP verboseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type dati(datiSEXP);
    Rcpp::traits::input_parameter< const unsigned int >::type n_iter(n_iterSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type B_inv(B_invSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type W_inv(W_invSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type U(USEXP);
    Rcpp::traits::input_parameter< const double >::type nw(nwSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type mu(muSEXP);
    Rcpp::traits::input_parameter< const unsigned int >::type burn_in(burn_inSEXP);
    Rcpp::traits::input_parameter< const bool >::type chain_output(chain_outputSEXP);
    Rcpp::traits::input_parameter< const bool >::type verbose(verboseSEXP);
    rcpp_result_gen = Rcpp::wrap(samesource_C(dati, n_iter, B_inv, W_inv, U, nw, mu, burn_in, chain_output, verbose));
    return rcpp_result_gen;
END_RCPP
}
