// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// isCholeskyOn
bool isCholeskyOn();
RcppExport SEXP _bayessource_isCholeskyOn() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    rcpp_result_gen = Rcpp::wrap(isCholeskyOn());
    return rcpp_result_gen;
END_RCPP
}
// marginalLikelihood_internal
Rcpp::List marginalLikelihood_internal(const arma::mat& X, const unsigned int n_iter, const arma::mat& B_inv, const arma::mat& W_inv, const arma::mat& U, const double nw, const arma::vec& mu, const unsigned int burn_in, const bool chain_output, const bool verbose, const bool Gibbs_only);
RcppExport SEXP _bayessource_marginalLikelihood_internal(SEXP XSEXP, SEXP n_iterSEXP, SEXP B_invSEXP, SEXP W_invSEXP, SEXP USEXP, SEXP nwSEXP, SEXP muSEXP, SEXP burn_inSEXP, SEXP chain_outputSEXP, SEXP verboseSEXP, SEXP Gibbs_onlySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const unsigned int >::type n_iter(n_iterSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type B_inv(B_invSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type W_inv(W_invSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type U(USEXP);
    Rcpp::traits::input_parameter< const double >::type nw(nwSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type mu(muSEXP);
    Rcpp::traits::input_parameter< const unsigned int >::type burn_in(burn_inSEXP);
    Rcpp::traits::input_parameter< const bool >::type chain_output(chain_outputSEXP);
    Rcpp::traits::input_parameter< const bool >::type verbose(verboseSEXP);
    Rcpp::traits::input_parameter< const bool >::type Gibbs_only(Gibbs_onlySEXP);
    rcpp_result_gen = Rcpp::wrap(marginalLikelihood_internal(X, n_iter, B_inv, W_inv, U, nw, mu, burn_in, chain_output, verbose, Gibbs_only));
    return rcpp_result_gen;
END_RCPP
}
// logSumExp
double logSumExp(const arma::vec& v);
RcppExport SEXP _bayessource_logSumExp(SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type v(vSEXP);
    rcpp_result_gen = Rcpp::wrap(logSumExp(v));
    return rcpp_result_gen;
END_RCPP
}
// logSumExpMean
double logSumExpMean(const arma::vec& v);
RcppExport SEXP _bayessource_logSumExpMean(SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type v(vSEXP);
    rcpp_result_gen = Rcpp::wrap(logSumExpMean(v));
    return rcpp_result_gen;
END_RCPP
}
// logCumsumExp
arma::vec logCumsumExp(const arma::vec& v);
RcppExport SEXP _bayessource_logCumsumExp(SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type v(vSEXP);
    rcpp_result_gen = Rcpp::wrap(logCumsumExp(v));
    return rcpp_result_gen;
END_RCPP
}
// logCummeanExp
arma::vec logCummeanExp(const arma::vec& v);
RcppExport SEXP _bayessource_logCummeanExp(SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type v(vSEXP);
    rcpp_result_gen = Rcpp::wrap(logCummeanExp(v));
    return rcpp_result_gen;
END_RCPP
}
// inv_triangular
arma::mat inv_triangular(const arma::mat& U);
RcppExport SEXP _bayessource_inv_triangular(SEXP USEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type U(USEXP);
    rcpp_result_gen = Rcpp::wrap(inv_triangular(U));
    return rcpp_result_gen;
END_RCPP
}
// inv_sympd_tol
arma::mat inv_sympd_tol(const arma::mat& U_sympd);
RcppExport SEXP _bayessource_inv_sympd_tol(SEXP U_sympdSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type U_sympd(U_sympdSEXP);
    rcpp_result_gen = Rcpp::wrap(inv_sympd_tol(U_sympd));
    return rcpp_result_gen;
END_RCPP
}
// chol2inv
arma::mat chol2inv(const arma::mat& U_chol);
RcppExport SEXP _bayessource_chol2inv(SEXP U_cholSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type U_chol(U_cholSEXP);
    rcpp_result_gen = Rcpp::wrap(chol2inv(U_chol));
    return rcpp_result_gen;
END_RCPP
}
// inv_Cholesky_from_Cholesky
arma::mat inv_Cholesky_from_Cholesky(const arma::mat& U);
RcppExport SEXP _bayessource_inv_Cholesky_from_Cholesky(SEXP USEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type U(USEXP);
    rcpp_result_gen = Rcpp::wrap(inv_Cholesky_from_Cholesky(U));
    return rcpp_result_gen;
END_RCPP
}
// ldet_from_Cholesky
double ldet_from_Cholesky(const arma::mat& T_chol);
RcppExport SEXP _bayessource_ldet_from_Cholesky(SEXP T_cholSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type T_chol(T_cholSEXP);
    rcpp_result_gen = Rcpp::wrap(ldet_from_Cholesky(T_chol));
    return rcpp_result_gen;
END_RCPP
}
// rmvnorm
arma::mat rmvnorm(const unsigned int n, const arma::colvec& mu, const arma::mat& Cov, const bool is_chol);
RcppExport SEXP _bayessource_rmvnorm(SEXP nSEXP, SEXP muSEXP, SEXP CovSEXP, SEXP is_cholSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const unsigned int >::type n(nSEXP);
    Rcpp::traits::input_parameter< const arma::colvec& >::type mu(muSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Cov(CovSEXP);
    Rcpp::traits::input_parameter< const bool >::type is_chol(is_cholSEXP);
    rcpp_result_gen = Rcpp::wrap(rmvnorm(n, mu, Cov, is_chol));
    return rcpp_result_gen;
END_RCPP
}
// dmvnorm
arma::vec dmvnorm(const arma::mat& x, const arma::rowvec& mean, const arma::mat& Cov, const bool logd, const bool is_chol);
RcppExport SEXP _bayessource_dmvnorm(SEXP xSEXP, SEXP meanSEXP, SEXP CovSEXP, SEXP logdSEXP, SEXP is_cholSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const arma::rowvec& >::type mean(meanSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Cov(CovSEXP);
    Rcpp::traits::input_parameter< const bool >::type logd(logdSEXP);
    Rcpp::traits::input_parameter< const bool >::type is_chol(is_cholSEXP);
    rcpp_result_gen = Rcpp::wrap(dmvnorm(x, mean, Cov, logd, is_chol));
    return rcpp_result_gen;
END_RCPP
}
// rwish
arma::mat rwish(const double v, const arma::mat& S, const bool is_chol, const bool return_chol);
RcppExport SEXP _bayessource_rwish(SEXP vSEXP, SEXP SSEXP, SEXP is_cholSEXP, SEXP return_cholSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const double >::type v(vSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type S(SSEXP);
    Rcpp::traits::input_parameter< const bool >::type is_chol(is_cholSEXP);
    Rcpp::traits::input_parameter< const bool >::type return_chol(return_cholSEXP);
    rcpp_result_gen = Rcpp::wrap(rwish(v, S, is_chol, return_chol));
    return rcpp_result_gen;
END_RCPP
}
// diwishart_inverse
double diwishart_inverse(const arma::mat& X_inv, const double& df, const arma::mat& Sigma, const bool logd, const bool is_chol);
RcppExport SEXP _bayessource_diwishart_inverse(SEXP X_invSEXP, SEXP dfSEXP, SEXP SigmaSEXP, SEXP logdSEXP, SEXP is_cholSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type X_inv(X_invSEXP);
    Rcpp::traits::input_parameter< const double& >::type df(dfSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Sigma(SigmaSEXP);
    Rcpp::traits::input_parameter< const bool >::type logd(logdSEXP);
    Rcpp::traits::input_parameter< const bool >::type is_chol(is_cholSEXP);
    rcpp_result_gen = Rcpp::wrap(diwishart_inverse(X_inv, df, Sigma, logd, is_chol));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_bayessource_isCholeskyOn", (DL_FUNC) &_bayessource_isCholeskyOn, 0},
    {"_bayessource_marginalLikelihood_internal", (DL_FUNC) &_bayessource_marginalLikelihood_internal, 11},
    {"_bayessource_logSumExp", (DL_FUNC) &_bayessource_logSumExp, 1},
    {"_bayessource_logSumExpMean", (DL_FUNC) &_bayessource_logSumExpMean, 1},
    {"_bayessource_logCumsumExp", (DL_FUNC) &_bayessource_logCumsumExp, 1},
    {"_bayessource_logCummeanExp", (DL_FUNC) &_bayessource_logCummeanExp, 1},
    {"_bayessource_inv_triangular", (DL_FUNC) &_bayessource_inv_triangular, 1},
    {"_bayessource_inv_sympd_tol", (DL_FUNC) &_bayessource_inv_sympd_tol, 1},
    {"_bayessource_chol2inv", (DL_FUNC) &_bayessource_chol2inv, 1},
    {"_bayessource_inv_Cholesky_from_Cholesky", (DL_FUNC) &_bayessource_inv_Cholesky_from_Cholesky, 1},
    {"_bayessource_ldet_from_Cholesky", (DL_FUNC) &_bayessource_ldet_from_Cholesky, 1},
    {"_bayessource_rmvnorm", (DL_FUNC) &_bayessource_rmvnorm, 4},
    {"_bayessource_dmvnorm", (DL_FUNC) &_bayessource_dmvnorm, 5},
    {"_bayessource_rwish", (DL_FUNC) &_bayessource_rwish, 4},
    {"_bayessource_diwishart_inverse", (DL_FUNC) &_bayessource_diwishart_inverse, 5},
    {NULL, NULL, 0}
};

RcppExport void R_init_bayessource(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
